#!/usr/bin/guile -s
!#
(load "utils.ss")


(define (product_r term a next b)
  (if (> a b)
      1
      (* (term a)
         (product_r term (next a) next b))))

(define (product_i term a next b)
    (define (iter a result)
        (if (> a b)
            result
            (iter (next a) (* result (term a)))))
    (iter a 1))

(define (fac n)
    (define (inc i) (+ i 1))
    (define (elem x) x)
    (product_i elem 1 inc n))


(define (pi_rec prec) 
    (define (inc i) (+ i 1))
    (define (num n)
        (define (f k) 
            (cond ((= 0 k) 2) 
                  ((even? k) (f (- k 1)))
                  (else (+ 2 (f (- k 1))))))
        (product_i f 0 inc n))
    (define (den n)
        (define (f k) 
            (cond ((= 0 k) 3) 
                  ((even? k) (+ 2(f (- k 1))))
                  (else (f (- k 1)))))
        (product_i f 0 inc n))
    (* 4.0 (/ (num prec) (den prec))))

(define (pi_rec2 prec) 
    (define (inc i) (+ i 1))
    (define (num k) 
        (cond ((= 0 k) 2) 
              ((even? k) (num (- k 1)))
              (else (+ 2 (num (- k 1))))))
    (define (den k) 
        (cond ((= 0 k) 3) 
              ((even? k) (+ 2 (den (- k 1))))
              (else (den (- k 1)))))
    (define (f x)
        (/ (num x) (den x)))
    (* 4.0 (product_i f 0 inc prec)))


(define (pi_iter prec) 
    (define (inc i) (+ i 1))
    (define (num k)
        (define (f n acc) 
            (cond ((= n k) acc) 
                  ((even? n) (f (+ n 1) acc))
                  (else (f (+ n 1) (+ 2 acc)))))
        (f 1 2))
    (define (den k)
        (define (f n acc) 
            (cond ((= n k) acc) 
                  ((even? n) (f (+ n 1) (+ 2 acc)))
                  (else (f (+ n 1) acc))))
        (f 0 1))
    (define (f x)
        (/ (num x) (den x)))
    (* 4.0 (product_i f 1 inc prec)))


(define (pi_sicp n)
  (define (pi-term k)
    (/ (* (- k 1) (+ k 1)) (square k)))
  (define (pi-next k)
    (+ k 2))
  (* 4.0 (product_i pi-term 3 pi-next n)))

(define (pi_sicp2 n)
  (define (pi-term x)
    (if (odd? x)
        (/ (+ x 1) (+ x 2))
        (/ (+ x 2) (+ x 1))))
  (define (pi-next x) (+ x 1))
  (* 4.0 (product_i pi-term 1 pi-next n)))


(define (pi_sicp3 n)
  (define (sqr x) (* x x))
  (define (fun n) (/ (+ 1 n) n))
  (define (next n) (+ 2 n))
  (define p (product_i fun 1 n next))
  (* (/ 2.0 n) (sqr p)))


(define (t_pi_rec) (pi_rec 1000))
(define (t_pi_rec2) (pi_rec2 1000))
(define (t_pi_iter) (pi_iter 1000))
(define (t_pi_sicp) (pi_sicp 20000))
(define (t_pi_sicp2) (pi_sicp2 20000))
(define (t_pi_sicp3) (pi_sicp3 20000))

(time_test t_pi_rec)
(time_test t_pi_rec2)
(time_test t_pi_iter)
(time_test t_pi_sicp)
(time_test t_pi_sicp2)
(time_test t_pi_sicp2)
