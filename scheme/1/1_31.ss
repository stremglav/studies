#!/usr/bin/guile -s
!#
(load "utils.ss")

(define (product_r term a next b)
  (if (> a b)
      1
      (* (term a)
         (product_r term (next a) next b))))

(define (product_i term a next b)
    (define (iter a result)
        (if (> a b)
            result
            (iter (next a) (* result (term a)))))
    (iter a 1))

(define (fac_i n)
    (define (inc i) (+ i 1))
    (define (elem x) x)
    (product_i elem 1 inc n))
(define (fac_r n)
    (define (inc i) (+ i 1))
    (define (elem x) x)
    (product_r elem 1 inc n))

(define (pi prec) 
    (define (inc i) (+ i 1))
    (define (num n)
        (define (f k) 
            (cond ((= 0 k) 2) 
                  ((even? k) (f (- k 1)))
                  (else (+ 2 (f (- k 1))))))
        (product_i f 0 inc n))
    (define (den n)
        (define (f k) 
            (cond ((= 0 k) 3) 
                  ((even? k) (+ 2(f (- k 1))))
                  (else (f (- k 1)))))
        (product_i f 0 inc n))
    (* 4.0 (/ (num prec) (den prec))))
(define (pi2 prec) 
    (define (inc i) (+ i 1))
    (define (num k) 
        (cond ((= 0 k) 2) 
              ((even? k) (num (- k 1)))
              (else (+ 2 (num (- k 1))))))
    (define (den k) 
        (cond ((= 0 k) 3) 
              ((even? k) (+ 2 (den (- k 1))))
              (else (den (- k 1)))))
    (define (f x)
        (/ (num x) (den x)))
    (* 4.0 (product_i f 0 inc prec)))
(define (pi3 prec) 
    (define (inc i) (+ i 1))
    (define (num k)
        (define (f n acc) 
            (cond ((= n k) acc) 
                  ((even? n) (f (+ n 1) acc))
                  (else (f (+ n 1) (+ 2 acc)))))
        (f 1 2))
    (define (den k)
        (define (f n acc) 
            (cond ((= n k) acc) 
                  ((even? n) (f (+ n 1) (+ 2 acc)))
                  (else (f (+ n 1) acc))))
        (f 0 1))
    (define (f x)
        (/ (num x) (den x)))
    (* 4.0 (product_i f 1 inc prec)))

;1 2 1 2 1 2
;2 1 2 1 2 1
(define (pi_good prec) 
    (define (inc i) (+ i 1))
    (define (f x)
        (if (odd? x)
            (/ (+ x 1) (+ x 2))
            (/ (+ x 2) (+ x 1))))
    (* 4.0 (product_i f 1 inc prec)))


(define (t_fac_r) (fac_r 500))
(define (t_fac_i) (fac_i 500))

(define (t_pi) (pi 2000))
(define (t_pi2) (pi2 2000))
(define (t_pi3) (pi3 2000))
(define (t_pi_good) (pi_good 2000))

(time_test_b "time for recursive factorial of 500" t_fac_r)
(time_test_b "time for iterative factorial of 500" t_fac_i)

(time_test_f "t_pi" t_pi)
(time_test_f "t_pi2" t_pi2)
(time_test_f "t_pi3" t_pi3)
(time_test_f "t_pi_good" t_pi_good)
