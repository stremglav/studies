(define (make-frame origin edge1 edge2)
  (cons origin (cons edge1 edge2)))

(define (origin-frame f) (car f))
(define (edge1-frame f) (cadr f))
(define (edge2-frame f) (cddr f))

(define (make-vect x y) (cons x y))
(define (xcor-vect v) (car v))
(define (ycor-vect v) (cdr v))

(define (make-segment s e) (cons s e))
(define (start-segment s) (car s))
(define (end-segment s) (cdr s))

(define (make-line a b c) (list a b c))
(define (get-a l) (car l))
(define (get-b l) (cadr l))
(define (get-c l) (caddr l))

(define (coeff a b)
    (let ((x1 (xcor-vect a))
          (y1 (ycor-vect a))
          (x2 (xcor-vect b))
          (y2 (ycor-vect b)))
         (let ((a (- y1 y2))
               (b (- x2 x1))
               (c (- (* x1 y2) (* x2 y1))))
              (make-line a b c))))

(define (get-line l v)
    (let ((x (xcor-vect v))
          (y (ycor-vect v))
          (a (get-a l))
          (b (get-b l)))
         (make-line a b (+ (* -1 a x) (* -1 b y)))))

(define (cross-point l1 l2)
    (let ((a1 (get-a l1))
          (b1 (get-b l1))
          (c1 (get-c l1))
          (a2 (get-a l2))
          (b2 (get-b l2))
          (c2 (get-c l2)))
         (make-vect (/ (- (* b1 c2) (* b2 c1)) (- (* a1 b2) (* a2 b1)))
                    (/ (- (* c1 a2) (* c2 a1)) (- (* a1 b2) (* a2 b1))))))

(define (last-koord fr)
    (let ((orig (origin-frame fr))
          (ed1 (edge1-frame fr))
          (ed2 (edge2-frame fr)))
          (cross-point (get-line (coeff orig ed2) ed1)
                       (get-line (coeff orig ed1) ed2))))

(define (mid-point a b)
    (make-vect (average (xcor-vect a) (xcor-vect b))
               (average (ycor-vect a) (ycor-vect b))))

(define (frame-seg-list fr)
    (let ((p0 (origin-frame fr))
          (p1 (edge1-frame fr))
          (p2 (last-koord fr))
          (p3 (edge2-frame fr)))
         (cr-seg-list (list p0 p1 p2 p3))))

(define (x-seg-list fr)
    (let ((p0 (origin-frame fr))
          (p1 (edge1-frame fr))
          (p2 (last-koord fr))
          (p3 (edge2-frame fr)))
         (list (make-segment p0 p2)
               (make-segment p1 p3))))

(define (rhombus-seg-list fr)
    (let ((p0 (origin-frame fr))
          (p1 (edge1-frame fr))
          (p2 (last-koord fr))
          (p3 (edge2-frame fr)))
         (cr-seg-list (map (lambda(x)
                               (mid-point (start-segment x)
                                          (end-segment x))) 
                      (cr-seg-list (list p0 p1 p2 p3))))))

(define (cr-seg-list l)
    (map make-segment l (append (cdr l) (list (car l)))))

(define v00 (make-vect 1 1))
(define v01 (make-vect -1 -1))
(define v02 (make-vect -1 4))
(define fr0 (make-frame v00 v01 v02))

(define v10 (make-vect 3 2))
(define v11 (make-vect 7 2))
(define v12 (make-vect 5 5))
(define fr1 (make-frame v10 v11 v12))

(define v20 (make-vect 3 3))
(define v21 (make-vect 8 4))
(define v22 (make-vect 3 7))
(define fr2 (make-frame v20 v21 v22))

(define l1 (coeff (make-vect 5 5) (make-vect 3 2)))
(define l2 (coeff (make-vect 3 2) (make-vect 5 3)))