(define (element-of-set? x set)
  (cond ((null? set) false)
        ((= x (car set)) true)
        ((< x (car set)) false) 
        (else (element-of-set? x (cdr set)))))

(define (adjoin-set x set)
  (define (iter acc set1) 
  (cond ((null? set1) (cons x set1))
        ((< (car set1) x) (iter (cons (car set1) acc) (cdr set1)))
        ((= (car set1) x) set)
        (else (append (reverse acc) (cons x set1)))))
  (iter '() set))