(define (d . args)
  (define (print l)
    (if (null? (cdr l))
        (display (car l))
        (begin
          (display (car l))
          (print (cdr l)))))
  (print args))

(define (cl start end)
    (define (cl2 st acc) 
    (if (< st start)
        acc
        (cl2 (- st 1) (cons st acc))))
    (cl2 end (list )))

(define (entry tree) (car tree))
(define (left-branch tree) (cadr tree))
(define (right-branch tree) (caddr tree))
(define (make-tree entry left right) (list entry left right))

(define (list->tree_my elements index)
  (define (partial-tree elts n)
    (begin
      ;(d "index: " index " list: " elts " n: " n "\n")
      (set! index (+ index 1))
      (cond ((= n 0) (cons '() elts))
            ((= n 1) (cons (list (car elts) '() '()) (cdr elts)))
            ( else
              (let ((left-size (quotient (- n 1) 2)))
                (let ((left-result (partial-tree elts left-size))) 
                  (let ((left-tree (car left-result))
                        (non-left-elts (cdr left-result))
                        (right-size (- n (+ left-size 1)))) 
                    (let ((this-entry (car non-left-elts))
                          (right-result (partial-tree (cdr non-left-elts) right-size)))
                      (let ((right-tree (car right-result))
                            (remaining-elts (cdr right-result)))
                        (cons (make-tree this-entry left-tree right-tree) remaining-elts))))))))))
  (d "tree: " (car (partial-tree elements (length elements))) "\niteration-count: " index))

(define (list->tree elements index)
  (define (partial-tree elts n)
    (begin
      ;(d "index: " index " list: " elts " n: " n "\n")
      (set! index (+ index 1))
      (cond ((= n 0) (cons '() elts))
            ( else
              (let ((left-size (quotient (- n 1) 2)))
                (let ((left-result (partial-tree elts left-size))) 
                  (let ((left-tree (car left-result))
                        (non-left-elts (cdr left-result))
                        (right-size (- n (+ left-size 1)))) 
                    (let ((this-entry (car non-left-elts))
                          (right-result (partial-tree (cdr non-left-elts) right-size)))
                      (let ((right-tree (car right-result))
                            (remaining-elts (cdr right-result)))
                        (cons (make-tree this-entry left-tree right-tree) remaining-elts))))))))))
  (d "tree: " (car (partial-tree elements (length elements))) "\niteration-count: " index))