(define (key entry) (car entry))
(define (value entry) (cdr entry))
(define (make-entry key value) (cons key valye))

(define (entry tree) (car tree))
(define (left-branch tree) (cadr tree))
(define (right-branch tree) (caddr tree))
(define (make-tree entry left right) (list entry left right))

(define (tree->list tree)
  (define (copy-to-list tree result-list)
    (if (null? tree) 
        result-list
        (copy-to-list (left-branch tree) 
                      (cons (entry tree)
                            (copy-to-list (right-branch tree) result-list)))))
  (copy-to-list tree '()))

(define (list->tree elements)
  (define (partial-tree elts n)
    (cond ((= n 0) (cons '() elts))
          ( else
            (let ((left-size (quotient (- n 1) 2)))
              (let ((left-result (partial-tree elts left-size))) 
                (let ((left-tree (car left-result))
                      (non-left-elts (cdr left-result))
                      (right-size (- n (+ left-size 1)))) 
                  (let ((this-entry (car non-left-elts))
                        (right-result (partial-tree (cdr non-left-elts) right-size)))
                    (let ((right-tree (car right-result))
                          (remaining-elts (cdr right-result)))
                      (cons (make-tree this-entry left-tree right-tree) remaining-elts)))))))))
  (car (partial-tree elements (length elements))))

(define (lookup k tree)
  (cond ((null? tree) #f)
        ((< k (key (entry tree))) (lookup k (left-branch tree)))
        ((> k (key (entry tree))) (lookup k (right-branch tree)))
        (else (entry tree))))